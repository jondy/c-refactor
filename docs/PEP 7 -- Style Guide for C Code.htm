<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>PEP 7 -- Style Guide for C Code</title>
  <meta name="keywords" content="None" />
  <meta name="description" content="None" />
  <link rel="alternate" type="application/rss+xml" title="Community Events"
        href="http://www.python.org/channews.rdf" />
  <link rel="alternate" type="application/rss+xml" title="Python Recipes"
        href="http://aspn.activestate.com/ASPN/Cookbook/Python/index_rss" />
  <link rel="alternate" type="application/rss+xml" title="Usergroup News"
        href="http://python-groups.blogspot.com/feeds/posts/default" />
  <link rel="alternate" type="application/rss+xml" title="Python Screencasts"
        href="http://www.showmedo.com/latestVideoFeed/rss2.0?tag=python" />
  <link rel="alternate" type="application/rss+xml" title="Python Podcasts"
        href="http://www.awaretek.com/python/index.xml" />
  <link rel="alternate" type="application/rss+xml" title="Foundation News"
        href="http://pyfound.blogspot.com/feeds/posts/default" />
  <link rel="alternate" type="application/rss+xml" title="Python Enhancement Proposals"
        href="http://www.python.org/dev/peps/peps.rss" />
  <link rel="alternate" type="application/rss+xml" title="Python Job Opportunities"
        href="http://www.python.org/community/jobs/jobs.rss" />
  <link rel="alternate" type="application/rss+xml" title="Reddit Feed of Python What's New Online"
        href="http://www.reddit.com/r/Python/.rss" />

  <link rel="stylesheet" type="text/css" media="screen" id="screen-switcher-stylesheet"
        href="/styles/screen-switcher-default.css" />
  <link rel="stylesheet" type="text/css" media="sc&#82;een"
        href="/styles/netscape4.css" />
  <link rel="stylesheet" type="text/css" media="print"
        href="/styles/print.css" />
  <link rel="alternate stylesheet" type="text/css" media="screen"
        href="/styles/largestyles.css" title="large text" />
  <link rel="alternate stylesheet" type="text/css" media="screen"
        href="/styles/defaultfonts.css" title="default fonts" />

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search under the www.python.org Domain"
        href="/search-pysite.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search within the Python Wiki"
        href="/search-pywiki.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search within Python Books at Google Book Search"
        href="/search-pybooks.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search within the Python Documentation"
        href="/search-pydocs.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search for a Module in the Standard Library"
        href="/search-pymodules.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search for Packages inside the Cheeseshop (PyPI)"
        href="/search-pycheese.xml"/>

  <link rel="search" type="application/opensearchdescription+xml"
        title="Search Archives of the Main Python Mailing List"
        href="/search-pythonlist.xml"/>

  <script type="text/javascript" src="/js/iotbs2-key-directors-load.js"></script>
  <script type="text/javascript" src="/js/iotbs2-directors.js"></script>
  <script type="text/javascript" src="/js/iotbs2-core.js"></script>

</head>


<body>
  <!-- Logo -->
  <h1 id="logoheader">
    <a href="/" id="logolink" accesskey="1"><img id="logo" src="/images/python-logo.gif" alt="homepage" border="0" /></a>
  </h1>
  <!-- Skip to Navigation -->
  <div class="skiptonav"><a href="#left-hand-navigation" accesskey="2"><img src="/images/trans.gif" id="skiptonav" alt="skip to navigation" border="0" /></a></div>
  <div class="skiptonav"><a href="#content-body" accesskey="3"><img src="/images/trans.gif" id="skiptocontent" alt="skip to content" border="0" /></a></div>
  <!-- Utility Menu -->
  <div id="utility-menu">
    <!-- Search Box -->
    <div id="searchbox">
      <form method="get" action="http://google.com/search" id="searchform" name="searchform">
        <div id="search">
          <input type="hidden" id="domains" name="domains" value="www.python.org" />
          <input type="hidden" id="sitesearch" name="sitesearch" value="www.python.org" />
          <input type="hidden" id="sourceid" name="sourceid" value="google-search" />
          <input type="text" class="input-text" name="q" id="q" />
          <input type="submit" value="search" class="input-button" name="submit" id="submit" />
          <a href="/search" class="reference">Advanced Search</a>
        </div>
      </form>
    </div>
    <div id="screen-switcher"></div>
  </div>

  <div id="left-hand-navigation">
    <!-- Main Menu -->
    <div id="menu">
      <ul class="level-one">
            <li>
          <a href="/about/" title="About The Python Language">About</a>
        </li>
            <li>
          <a href="/news/" title="Major Happenings Within the Python Community">News</a>
        </li>
            <li>
          <a href="/doc/" title="Tutorials, Library Reference, C API">Documentation</a>
        </li>
            <li>
          <a href="/download/" title="Start Running Python Under Windows, Mac, Linux and Others">Download</a>
        </li>
            <li>
          <a href="/community/" title="Mailing Lists, Jobs, Conferences, SIGs, Online Chats">Community</a>
        </li>
            <li>
          <a href="/psf/" title="Python Software Foundation">Foundation</a>
        </li>
            <li class="selected">
          <a href="/dev/" title="Development of the Python language and website" class="selected">Core Development</a>
	    <ul class="level-two">
		<li>
	      <a href="/dev/why/">Why Develop Python?</a>
              </li>
		<li>
	      <a href="/dev/setup/">Getting Set Up</a>
              </li>
		<li>
	      <a href="/dev/workflow/">Issue Workflow</a>
              </li>
		<li>
	      <a href="/dev/contributing/">How to Contribute to Python</a>
              </li>
		<li>
	      <a href="/dev/intro/">Intro to Development</a>
              </li>
		<li>
	      <a href="/dev/process/">Development Process</a>
              </li>
		<li>
	      <a href="/dev/culture/">Culture</a>
              </li>
		<li>
	      <a href="/dev/tools/">Tools</a>
              </li>
		<li>
	      <a href="/dev/patches/">Patch Submission</a>
              </li>
		<li>
	      <a href="/dev/buildbot/">Buildbot</a>
              </li>
		<li>
	      <a href="/dev/doc/">Documenting Python</a>
              </li>
		<li>
	      <a href="/dev/faq/">FAQ</a>
              </li>
		<li class="selected">
	      <a href="/dev/peps/" class="selected">PEP Index</a>
              </li>
		<li>
	      <a href="/dev/summary/">python-dev Summaries</a>
              </li>
		<li>
	      <a href="/dev/pydotorg/">Python.org</a>
              </li>
		<li>
	      <a href="http://svn.python.org/view/">Browse Subversion</a>
              </li>
		<li>
	      <a href="http://svn.python.org/snapshots/">Daily Snapshots</a>
              </li>
	    </ul>
        </li>
            <li>
          <a href="/links/" title="Pointers to Useful Information">Links</a>
        </li>
      </ul>
    </div>

    <!-- Quick Links -->
    <h4><a style="color:#D58228; margin-top:1.5em" href="/psf/donations/">Help Fund Python</a></h4>
    <div style="align:center; padding-top: 0.5em; padding-left: 1em">
      <a href="/psf/donations/"><img width="116" height="42" src="/images/donate.png" alt="" title="" /></a>
    </div>
  </div>

  <div id="content-body">
    <div id="body-main">
      <div id="content">
        
          <div id="breadcrumb">
               <a href="/dev/">Core Development</a>
               <span class="breadcrumb-separator">&gt;</span>
               <a href="/dev/peps/">PEP Index</a>
               <span class="breadcrumb-separator">&gt;</span>
            
            PEP 7 -- Style Guide for C Code
          </div>



        <!--
This HTML is auto-generated.  DO NOT EDIT THIS FILE!  If you are writing a new
PEP, see http://www.python.org/dev/peps/pep-0001 for instructions and links
to templates.  DO NOT USE THIS HTML FILE AS YOUR TEMPLATE!
-->
<div class="header">
<table border="0" class="rfc2822">
  <tr><th class="field-name">PEP:&nbsp;</th><td>7</td></tr>
  <tr><th class="field-name">Title:&nbsp;</th><td>Style Guide for C Code</td></tr>
  <tr><th class="field-name">Version:&nbsp;</th><td>65634</td></tr>
  <tr><th class="field-name">Last-Modified:&nbsp;</th><td><a href="http://svn.python.org/view/*checkout*/peps/trunk/pep-0007.txt"> 2008-08-10 19:25:11 +0200 (Sun, 10 Aug 2008)</a> </td></tr>
  <tr><th class="field-name">Author:&nbsp;</th><td>Guido van Rossum &lt;guido&#32;&#97;t&#32;python.org&gt;</td></tr>
  <tr><th class="field-name">Status:&nbsp;</th><td>Active</td></tr>
  <tr><th class="field-name">Type:&nbsp;</th><td>Process</td></tr>
  <tr><th class="field-name">Created:&nbsp;</th><td>05-Jul-2001</td></tr>
  <tr><th class="field-name">Post-History:&nbsp;</th><td></td></tr>
</table>
</div>
<h3>Introduction</h3>
<pre>
    This document gives coding conventions for the C code comprising
    the C implementation of Python.  Please see the companion
    informational PEP describing style guidelines for Python code[1].

    Note, rules are there to be broken.  Two good reasons to break a
    particular rule:

    (1) When applying the rule would make the code less readable, even
        for someone who is used to reading code that follows the rules.

    (2) To be consistent with surrounding code that also breaks it
        (maybe for historic reasons) -- although this is also an
        opportunity to clean up someone else's mess (in true XP style).


</pre>
<h3>C dialect</h3>
<pre>
    - Use ANSI/ISO standard C (the 1989 version of the standard).
      This means (amongst many other things) that all declarations
      must be at the top of a block (not necessarily at the top of
      function).

    - Don't use GCC extensions (e.g. don't write multi-line strings
      without trailing backslashes).

    - All function declarations and definitions must use full
      prototypes (i.e. specify the types of all arguments).

    - Never use C++ style // one-line comments.

    - No compiler warnings with major compilers (gcc, VC++, a few
      others).


</pre>
<h3>Code lay-out</h3>
<pre>
    - Use single-tab indents, where a tab is worth 8 spaces, in files
      that already use tabs.  In new source files, and the few files
      that were created after this rule was introduced, use 4-space
      indents and no tabs at all.

      At some point, the whole codebase may be converted to use only
      4-space indents.

    - No line should be longer than 79 characters.  If this and the
      previous rule together don't give you enough room to code, your
      code is too complicated -- consider using subroutines.

    - No line should end in whitespace.  If you think you need
      significant trailing whitespace, think again -- somebody's
      editor might delete it as a matter of routine.

    - Function definition style: function name in column 1, outermost
      curly braces in column 1, blank line after local variable
      declarations.

	static int
	extra_ivars(PyTypeObject *type, PyTypeObject *base)
	{
		int t_size = PyType_BASICSIZE(type);
		int b_size = PyType_BASICSIZE(base);

		assert(t_size &gt;= b_size); /* type smaller than base! */
		...
		return 1;
	}

    - Code structure: one space between keywords like 'if', 'for' and
      the following left paren; no spaces inside the paren; braces as
      shown:

	if (mro != NULL) {
		...
	}
	else {
		...
	}

    - The return statement should *not* get redundant parentheses:

	return Py_None; /* correct */
	return(Py_None); /* incorrect */

    - Function and macro call style: foo(a, b, c) -- no space before
      the open paren, no spaces inside the parens, no spaces before
      commas, one space after each comma.

    - Always put spaces around assignment, Boolean and comparison
      operators.  In expressions using a lot of operators, add spaces
      around the outermost (lowest-priority) operators.

    - Breaking long lines: if you can, break after commas in the
      outermost argument list.  Always indent continuation lines
      appropriately, e.g.:

	PyErr_Format(PyExc_TypeError,
		     "cannot create '%.100s' instances",
		     type-&gt;tp_name);

    - When you break a long expression at a binary operator, the
      operator goes at the end of the previous line, e.g.:

	if (type-&gt;tp_dictoffset != 0 &amp;&amp; base-&gt;tp_dictoffset == 0 &amp;&amp;
	    type-&gt;tp_dictoffset == b_size &amp;&amp;
	    (size_t)t_size == b_size + sizeof(PyObject *))
		return 0; /* "Forgive" adding a __dict__ only */

    - Put blank lines around functions, structure definitions, and
      major sections inside functions.

    - Comments go before the code they describe.

    - All functions and global variables should be declared static
      unless they are to be part of a published interface

    - For external functions and variables, we always have a
      declaration in an appropriate header file in the "Include"
      directory, which uses the DL_IMPORT() macro, like this:

	extern DL_IMPORT(PyObject *) PyObject_Repr(PyObject *);


</pre>
<h3>Naming conventions</h3>
<pre>
    - Use a Py prefix for public functions; never for static
      functions.  The Py_ prefix is reserved for global service
      routines like Py_FatalError; specific groups of routines
      (e.g. specific object type APIs) use a longer prefix,
      e.g. PyString_ for string functions.

    - Public functions and variables use MixedCase with underscores,
      like this: PyObject_GetAttr, Py_BuildValue, PyExc_TypeError.

    - Occasionally an "internal" function has to be visible to the
      loader; we use the _Py prefix for this, e.g.: _PyObject_Dump.

    - Macros should have a MixedCase prefix and then use upper case,
      for example: PyString_AS_STRING, Py_PRINT_RAW.


</pre>
<h3>Documentation Strings</h3>
<pre>
    - Use the PyDoc_STR() or PyDoc_STRVAR() macro for docstrings to
      support building Python without docstrings (./configure
      --without-doc-strings).

      For C code that needs to support versions of Python older than
      2.3, you can include this after including Python.h:

        #ifndef PyDoc_STR
        #define PyDoc_VAR(name)         static char name[]
        #define PyDoc_STR(str)          (str)
        #define PyDoc_STRVAR(name, str) PyDoc_VAR(name) = PyDoc_STR(str)
        #endif

    - The first line of each fuction docstring should be a "signature
      line" that gives a brief synopsis of the arguments and return
      value.  For example:

        PyDoc_STRVAR(myfunction__doc__,
        "myfunction(name, value) -&gt; bool\n\n\
        Determine whether name and value make a valid pair.");

      Always include a blank line between the signature line and the
      text of the description.

      If the return value for the function is always None (because
      there is no meaningful return value), do not include the
      indication of the return type.

    - When writing multi-line docstrings, be sure to always use
      backslash continuations, as in the example above, or string
      literal concatenation:

        PyDoc_STRVAR(myfunction__doc__,
        "myfunction(name, value) -&gt; bool\n\n"
        "Determine whether name and value make a valid pair.");

      Though some C compilers accept string literals without either:

        /* BAD -- don't do this! */
        PyDoc_STRVAR(myfunction__doc__,
        "myfunction(name, value) -&gt; bool\n\n
        Determine whether name and value make a valid pair.");

      not all do; the MSVC compiler is known to complain about this.


</pre>
<h3>References</h3>
<pre>
    [1] <a href="/dev/peps/pep-0008">PEP 8</a>, Style Guide for Python Code, van Rossum, Warsaw
        <a href="http://www.python.org/dev/peps/pep-0008/">http://www.python.org/dev/peps/pep-0008/</a>


</pre>
<h3>Copyright</h3>
<pre>
    This document has been placed in the public domain.


</pre>


      </div>

      
      <div id="footer">
	<div id="credits">
 	  <a href="/about/website">Website maintained by the Python community</a><br/>
	  <a href="http://www.xs4all.com/" title="Web and email hosting provided by xs4all, Netherlands">hosting by xs4all</a> /
	  <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">design by Tim Parkin</a>
	</div>
	Copyright &copy; 1990-2009, <a href='/psf/'>Python Software Foundation</a><br/>
	<a href="/about/legal">Legal Statements</a>
      </div>


    </div>
  </div>
</body>
</html>






